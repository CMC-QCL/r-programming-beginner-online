R Programming for Beginners (Online)
========================================================
author: Jeho Park
date: April 9, 2020
transition: none
autosize: true
css: custom.css

## Murty Sunak Quantitative and Computing Lab
### Online Workshop Series: Level 1 - Coding + Data

Some Housekeeping Stuff
========================================================
- **Sign-in** at 
- **Files** at https://cmc-qcl.github.io/r-programming-beginner-online/
- **Interactive poll**: http://pollev.com/jehopark360

After you finish this workshop, you will be able to...
========================================================
* TO B UPDATED

Agenda
========================================================
## Part I: R Computing Environment
* Getting Started with R and RStudio
* R computing environment setup

## Part II: Working with Data
* Built-in datasets and data import
* Data exploration and data visualization
* Hands-on exercise

Getting Started with R and RStudio
========================================================
A Quick Start Guide for R Beginners

In this section, you will be guided to learn some very basic information about R and RStudio.

I will then check your R/RStudio environment to make sure that you can use R/RStudio afterwards.

What is RStudio?
========================================================
* Integrated Development Environment for R
* Nice combination of GUI and CLI
* Free and commercial version
* 4 main panes and multiple tabs
* Version control: Git and VPN
* Debugging 
* Documentation: R Markdown and Notebook
  - install.packages("rmarkdown")
  - http://rmarkdown.rstudio.com/
* Presentation slides: R Presentation (this one!)

Check Point 1: Environment Check
========================================================
For your R'ing, make sure that you have
* R (https://www.r-project.org/) 
* RStudio Desktop (https://rstudio.com/products/rstudio/download/)

For today's workshop, we will be using 
* RStudio Cloud at https://rstudio.cloud

Please log in to your RStudio Cloud account. RStudio Cloud offers the same RStudio Desktop interface and more such as project sharing.


RStudio Project in RStudio Cloud
========================================================
* Each project has its own folder to contain all the files you create for the project.
* History and Environment will be saved and be restored when you reopen the project.
* Version control (Git/GitHub) can be effectively used.

For more information about Git/GitHub use for R, please see https://happygitwithr.com/rstudio-git-github.html.


R's Arithmetic Operators
========================================================
```{r, eval=FALSE}
a <- 16 # assignment operator!
b <- 3
add <- a + b
sub = a - b
mult = a * b
div = a / b
int_div = a %/% b
exponent = a ^ b
modulus = a %% b
```

```{r}
# comments are preceded by hash sign sqrt(3*3)
```

Workspace
========================================================

R workspace stores objects like vectors, datasets and functions in memory (the available space for calculation is limited to the size of the RAM).

```{r, eval=FALSE}
ls()
```

[Hands-On] Now it's your turn
========================================================

Let's create a R Notebook and put the hands-on exercise in the Notebook document.

* Click on _File > New File > R Notebook_
* Save it as _QCL-R-Workshop-[your_initial]_
* And follow my instructions

Exercise 1:

Create a variable x containing pi times pi, and another variable y containing a square root of x. Show the values as an output.

Homework
========================================================
After finishing all the workshop exercises (Part I and Part II) on the R Notebook you just created, submit the R Notebook file (QCL-R-Workshop-[your_initial].Rmd) via email to 

qcl@cmc.edu

Email Subject Line should be:  
QCL R Workshop - [Your Name] - 4/9/2020 



Some Gene-R-al Stuff
========================================================
```{r, eval=FALSE}
demo() # display available demos

```{r, eval=FALSE}
demo(graphics) # try graphics demo

```{r, eval=FALSE}
library() # show available packages on the computer

```{r, eval=FALSE}
search() # show loaded packages

```{r, eval=FALSE}
?hist # search for the usage of hist function
```

```{r, eval=FALSE}
??histogram # search for package documents containing the word "histogram"
```

R Packages
========================================================
- R is known for its community and its huge collection of user-generated packages
- Packages are collections of R functions, data, and compiled code in a well-defined format. The directory where packages are stored is called the library.
- We will install the dplyr package, a popular package for data manipulation

```{r eval=FALSE}
install.packages('dplyr') # you can also use RStudio's Packages tab

# You should load dplyr package first to use any functions and datasets in the package
library('dplyr') 
```

End of Part I (break check area)
========================================================
## We looked at general and basic features 
## Check if you can:

* Run RStudio on your computer or log in to RStudio Cloud
* Use RStudio Project environment 
* Create variables and check them from the "Environment" pane or ls()
* Run R commands on console and directly from the editor window.
* Create R Notebook and add Code Chunks
* Install new packages and load required packages


Session 2: Working with Data
========================================================
* Built-in datasets and data import
* Data exploration and data visualization
* Hands-on exercise

Built-in Datasets 
========================================================
- R's datasets package has some built in datasets that we will be using.
```{r eval=F}
data() # this will bring up a document, R data sets
```

- Let's look at CO2 datasets. The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance of the grass species Echinochloa crus-galli.
```{r eval=F}
help(CO2) # see what the dataset is about
CO2 # display all the contents of the data frame, CO2
```

#### Notice there's no CO2 dataframe in the Environment pane

Data Import
========================================================
## Data file import is very easy with RStudio

Follow the instructor and import "auto.csv" file!

Click-click-click-done!

Check if you have *auto* in your Environment.

Data Import (Other Cases)
=======================================================

### What if your data is on the Internet (e.g., GitHub)?

The same auto.csv file is available on the workshop GitHub repository:




Hands-On: Data Exploration - Head or Tail?
========================================================
When you have a large dataset, it's impossible and inconvenient to display the whole contents of the dataset on the screen. You will want to check the first few rows or the last few rows of the dataset. 

Exercise 2:

In this exercise, you will create a Code Chunk in the Notebook doing the following:
(1) Import "auto.csv" as auto_data
(2) Output the first 5 rows of auto_data using R's built-in function
(3) Output the last 5 rows of auto_data using R's built-in function

Data Exploration - Summary
========================================================
```{r}
# The summary function shows summary statistics.
require(readr)
auto <- read_csv("auto.csv")
summary(auto)
summary(CO2)
```

Data Visualization
========================================================
- Basic plots such as histogram, box plot, and scatter plot are within a few key strokes away (type `boxp` and wait for it)

```{r eval=F}
hist(auto$weight) # Use help function for more plotting options
boxplot(auto$mpg ~ auto$cylinders)
```
**Note that we used '$' to extract a variable (column/feature/etc) of a dataframe


Hands-On: Data Visualization - Scatter Plot
========================================================
Scatter plot is a very useful tool when you want to visualize a relationship between two variables. 

Exercise 3:
In this exercise, you want to create a scatter plot showing mpg on X axis and horsepower on Y-axis to see the relationship between the two variables.

In addition, change X label to "Miles per Gallon" and Y label to "Horse Power" and add a title "Horse Power vs. MPG" 

Data Visualization - Boxplot
========================================================
```{r eval=F}
boxplot(auto$mpg ~ auto$cylinders, data = auto, xlab = "Number of Cylinders", ylab = "Miles Per Gallon", main = "Mileage Data")
```

Data Wrangling
========================================================
Data wrangling, sometimes referred to as data munging, is the process of **transforming** and **mapping data** from one "raw" data form into another format with the intent of making it more appropriate and valuable for a variety of downstream purposes such as analytics. 

This may include further **munging**, **data visualization**, **data aggregation**, **training a statistical model**, as well as many other potential uses. 

[Wikipedia](https://en.wikipedia.org/wiki/Data_wrangling)

Data Wrangling: a simple example
========================================================
## Let's look at a simple data wrangling case
* First show the first few observations in iris dataset
* Find the mean sepal length of setosa (using __aggregate__ function)


Data Wrangling: a simple example (cont.)
========================================================

```{r eval=F}
# show the first few observations in iris dataset
[YOU DO THIS]

# Show mean sepal length for different species
aggregate(iris$Sepal.Length,by=list(iris$Species),FUN=mean)
```


Hands-On!
========================================================
Create a barplot showing daily changes in the COVID-19 cases in the US

(1) Data can be found from The NY Times: Coronavirus in the US

https://www.nytimes.com/interactive/2020/us/coronavirus-us-cases.html

(2) Open the GitHub repository where they store more current datasets

(3) Find the raw CSV file URL for U.S.State-Level Data (us-states.csv); copy the link address.

(4) Save the link address as url variable as follows:  
url <- "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"

(5) 

read_



(4) Import us-counties.csv in your R Environment

(5) Use aggregate function to sum "cases" by "date"

(6) Use barplot to plot the counts by day

You have *15 minutes* to finish this task!


End of Session 2
========================================================
# Make sure you can 
* Use built-in datasets
* Summarise datasets (exp. Dataframe)
* Import CSV files
* Plot histogram, boxplot, scatterplot, and barplot
* Aggregate a variable in a dataframe (or tiblet) by another variable


Further Study
========================================================
# Linear Regression


Linear Regression
========================================================
> Linear regression is used to predict the value of an outcome variable Y based on one or more input predictor variables X. The aim is to establish a linear relationship (a mathematical formula) between the predictor variable(s) and the response variable, so that, we can use this formula to estimate the value of the response Y, when only the predictors (Xs) values are known.

$$
Y = \beta_0 + \beta_1 X + ε
$$

where $Y$ is the response, $X$ is the predictor, and $ε$ is a random error term.

The linear model describes a straight line relationship between the response variable Y and predictor X.


Linear Regression (cont.)
========================================================
__Data and Method__

Consider a set of paired observations of speed and stopping distance of cars. Will there be a linear relation between stopping distance and speed of a car? Let's find out.

We will use "cars" dataset which is already installed.

Try ?cars

First we will create a scatter plot from the cars data. Then we will try fitting the relation using the lm function (fitting linear models) in stats package.

Linear Regression (cont.)
========================================================
__Graphical Analysis__ 

Let's first visually check the relatioship between two variables, speed and dist.
```{r, eval=F}
# [Q] what kind of plot shows realtionship between two variables?
```

Linear Regression (cont.)
========================================================
__Graphical Analysis__ 

Let's first visually check the relatioship between two variables, speed and dist.
```{r, eval=F}
plot(x=cars$speed, y=cars$dist) #simple scatterplot
scatter.smooth(x=cars$speed, y=cars$dist, main="Dist ~ Speed")  # scatterplot with smooth curve
```

Linear Regression (cont.)
========================================================
__Linear Model__ 

The R function for linear regression is lm (i.e., linear model). It takes two arguments: formula and data.

The formula that specifies a simple linear regression model $dist = \beta_1 + \beta_1 speed + ε$ is simply

**dist ∼ speed**

```{r, eval=F}
lm(dist ~ speed, data=cars)
```
__The function lm displays only the estimated coefficients, but the object returned by lm contains much more information.__

Linear Regression (cont.)
========================================================
__Fitting the model__ 

Let's save the result:
```{r, eval=F}
linearmodel <- lm(dist ~ speed, data=cars) #save the result
intercept <- linearmodel$coefficients[[1]]
slope <- linearmodel$coefficients[[2]]
```

Let's plot the line:
```{r, eval=F}
plot(cars, main="dist = -17.579 + 3.932 speed", 
     xlim=c(0, 25), ylim=c(-10,130)) # simple scatter plot
abline(intercept, slope) # adding a line manually
```

Linear Regression (cont.)
========================================================
__Linear Regression Diagnostic__

We want to know how good this model we just found is. 
- Is it statistically significant? 
- How good the model predict the value of response variable w.r.t a new value of the predictor variable. 
- How can we check?

```{r, eval=F}
# summary of the model statistics
```


Linear Regression (cont.)
========================================================
__Linear Regression Diagnostic__

We want to know how good this model we just found is. 
- Is it statistically significant? 
- How good the model predict the value of response variable w.r.t a new value of the predictor variable. 
- How can we check?

```{r, eval=F}
summary(linearmodel) 
```
Look at p-Values and r-squared for now. 

Linear Regression (cont.)
========================================================
__Linear Regression Diagnostic__

> In Linear Regression, the Null Hypothesis is that the coefficients associated with the variables is equal to zero (no effect). With the p-Value < 0.05, we can reject the null hypothesis. 

> R-squared value tells you that how good the model represent the actual population. It's called a goodness-of-fit measure for linear regression models. This statistic indicates the percentage of the variance in the dependent variable that the independent variables explain collectively.
  
Linear Regression (cont.)
========================================================
__The most common metrics to check the model's quality__ (http://r-statistics.co/Linear-Regression.html)
![Common Metrics](r-programming-beginner-figure/Linear_Regression_With_R.png)


Links and References
========================================================
> Useful links:
> 
> - R tutorial sites: http://jaredknowles.com/r-bootcamp/ and http://adv-r.had.co.nz/
> - R search site: http://rseek.org
> - R Markdown cheat sheet: http://shiny.rstudio.com/articles/rm-cheatsheet.html

**(Adapted from several publicly available resources such as 1) the R-Bootcamp by Jared Knowles: http://jaredknowles.com/r-bootcamp/, 2) Advanced R by Hadley Wickham: http://adv-r.had.co.nz</small>
<small>(Slides are made with the R Presentations tool in RStudio)**
